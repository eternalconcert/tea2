# Comment

CONST INT const_number = 1;
CONST STR const_string = "String";
CONST BOOL const_boolean = false;

INT var_number_no_assignment;
INT var_number = 1;
BOOL boolean_val = true;

STR var_string_no_assignment;
STR var_string = "String";

ARRAY list1 = [1, 2, 3, "Hello ", "world!"];
ARRAY list2;

INT num = list1[0]

INT fn name(INT formal_param1, INT formal_param2=2) {
    INT result;
    result = formal_param1 + formal_param2;
    return result;
};

VOID FN empty(INT formal_param1=1, INT formal_param2) {
    # Do something with formal_param1 and formal_param2
};

var_number_no_assignment_1 = name(const_number, 2);
INT var_number_no_assignment_2 = name(const_number, 3);

1 + 1;
2 - 2;
3 * 3;
4 / 4;

FLOAT number = -0.5;

INT res = 1 + 2;
INT res2 = res - 4;
INT res3 = 3 * 3;
INT res4 = 9 / 3;
res4 = 3 * 3 + 4


---------------------------------------------------
EBNF:
Program              = { Statement  ';'}.
Statement            = { Expression |
                         ConstDeclaration |
                         VarDeclaration |
                         VarAssignment |
                         FuncDeclaration |
                         FuncCall  |
                         IfStatement }.
Expression           = ArithmeticExpression | LogicalExpression.
ArithmeticExpression = Operand ArithmeticOperator Operand { ArithmeticOperator Operand }.
Operand              = Literal | Identifier.
ArithmeticOperator   = '+' | '-' | '*' | '/'.
LogicalExpression    = Operand | ( Operand LogicalOperator Operand { LogicalOperator Operand } ).
LogicalOperator      = '<' | '>' | '<=' | '>=' | '==' | 'and' | 'or' | 'xor' | 'not'.
Literal              = String | Integer | Float Boolean List.
String               = '"' (Letter | PosInt | ArithmeticOperator ) { Letter | PosInt | ArithmeticOperator } '"'.
Letter               =  CapitalLetter | 'a' | 'b' | '...' | 'z'.
CapitalLetter        = 'A' | 'B' | '...' | 'Z'.
Integer              = (['-'] '0') | ['-'] (PosInt [{ PosInt | '0' }]).
PosInt               = | '1' | '2' | '...' | '9'.
Float                = Integer '.' ('0' | PosInt ) { ('0' | PosInt ) }.
Boolean              = 'true' | 'false'.
List                 = '[' [{ ( Literal | Identifier ) }] ']'.
ConstDeclaration     = 'CONST' TypeIdent Identifier '=' Literal.
VarDeclaration       = 'VAR' TypeIdent Identifier ['=' (Literal | Identifier)].
VarAssignment        = Identifier '=' (Literal | Identifier).
Identifier           = Letter { Letter | PosInt }.
TypeIdent            = CapitalLetter { CapitalLetter }.
FuncDeclaration      = TypeIdent 'fn' Identifier '('
					 [ TypeIdent Identifier ['=' Literal] { ',' TypeIdent Identifier ['=' Literal] } ]
					 ')' '{' { [ Statement ]  [ 'return' [ Literal | Identifier ] ] } '}'.
FuncCall             = Identifier '(' [(Literal | Identifier) { ',' (Literal | Identifier) } ] ')'.
IfStatement          = 'if' LogicalExpression {',' LogicalExpression } '{' Statement {',' Statement } '}' [ 'else' '{' Statement {',' Statement } '}' ].